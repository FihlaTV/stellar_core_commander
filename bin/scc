#!/usr/bin/env ruby

require 'stellar_core_commander'
require 'slop'

def run
  $opts = Slop.parse(ARGV, :help => true) do
    banner 'Usage: scc -r RECIPE'

    on 'stellar-core-bin',
      'a path to a stellar-core executable (defaults to `which stellar-core`)',
      argument: true
    on 'r', 'recipe',
      'a recipe file',
      argument: true
    on 'p', 'process',
      'method for running stellar-core',
      argument: true,
      default: 'local'
    on 'w', 'wait',
      'wait for TERM signal before shutting down and cleaning up',
      argument: false,
      default: false
    on 'docker-core-image',
      'docker image to use for stellar-core',
      argument: true,
      default: 'stellar/stellar-core'
    on 'docker-state-image',
      'docker image to use for state',
      argument: true,
      default: 'stellar/stellar-core-state'
    on 'docker-pull',
      'docker pull images before use',
      default: false
    on 'atlas',
      'atlas endpoint for publishing metrics (e.g., http://192.168.59.103:7101/api/v1/publish)',
      argument: true,
      default: nil
    on 'atlas-interval',
      'number of seconds to wait between publishing metric payloads',
      argument: true,
      default: 1
    on 'destination',
      'where to store logs and other artifacts (default: a temporary directory)',
      argument: true,
      default: nil
    on 's3-history-prefix',
      's3 prefix to store temp history in (default: subdir of s3://history-stg.stellar.org/dev/scc)',
      argument: true,
      default: "s3://history-stg.stellar.org/dev/scc/#{Time.now.to_i}-#{rand 100000}"
    on 's3-history-region',
      's3 region to store temp history in (default: eu-west-1)',
      argument: true,
      default: "eu-west-1"
  end

  recipe    = load_recipe
  commander = make_commander

  #run recipe
  transactor = StellarCoreCommander::Transactor.new(commander)

  transactor.run_recipe recipe
  transactor.close_ledger

  output_results(commander.get_root_process transactor)

  if $opts[:wait]
    puts "Waiting for INT signal..."
    Signal.trap("INT"){ exit }
    sleep
  end
end


def make_commander
  opts = {
    stellar_core_bin: $opts[:"stellar-core-bin"],
    docker_core_image: $opts[:"docker-core-image"],
    docker_state_image: $opts[:"docker-state-image"],
    docker_pull: $opts[:"docker-pull"],
    atlas: $opts[:"atlas"],
    atlas_interval: $opts[:"atlas-interval"].to_i,
    s3_history_region: $opts[:"s3-history-region"],
    s3_history_prefix: $opts[:"s3-history-prefix"]
  }

  destination = $opts[:"destination"]
  if destination
    clean_up_destination = false
  else
    destination = Dir.mktmpdir("scc")
    clean_up_destination = true
  end

  StellarCoreCommander::Commander.new($opts[:"process"], destination, opts).tap do |c|
    c.cleanup_at_exit!(clean_up_destination)
  end
end

def load_recipe
  recipe = $opts[:recipe]

  if recipe.blank?
    $stderr.puts $opts
    exit 1
  end

  unless File.exist?(recipe)
    $stderr.puts "not found: #{recipe}"
    exit 1
  end

  recipe
end

def output_results(process)
  $stdout.puts process.dump_database
end

run
